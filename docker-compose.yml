version: '3.9'
services:
  ai:
    build:
      context: ./apps/ai
      dockerfile: Dockerfile
    container_name: lumo-ai
    env_file:
      - ./apps/ai/.env
    expose:
      - '8000'
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ai_logs:/app/logs
    logging:
      driver: 'loki'
      options:
        loki-url: 'http://loki:3100/loki/api/v1/push'

  admin:
    build:
      context: ./apps/admin
      dockerfile: Dockerfile
    container_name: lumo-admin
    env_file:
      - ./apps/admin/.env
    expose:
      - '3000'
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - ai
    logging:
      driver: 'loki'
      options:
        loki-url: 'http://loki:3100/loki/api/v1/push'

  # API Gateway
  kong:
    image: kong:3.4-alpine
    container_name: kong
    environment:
      KONG_DATABASE: 'off'
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      - '8000:8000'
      - '8001:8001'
      - '8002:8002'
    volumes:
      - ./infra/kong/kong.yml:/kong.yml
    command: kong start
    networks:
      - backend
    depends_on:
      - ai
      - admin

  nginx:
    image: nginx:alpine
    container_name: nginx
    volumes:
      - ./apps/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./infra/certbot/www:/var/www/certbot
      - ./infra/certbot/conf:/etc/letsencrypt
      - nginx_logs:/var/log/nginx
    ports:
      - '80:80'
      - '443:443'
    depends_on:
      - kong
    networks:
      - backend
    healthcheck:
      test: ['CMD', 'nginx', '-t']
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: 'loki'
      options:
        loki-url: 'http://loki:3100/loki/api/v1/push'

  # Logging System
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - '3100:3100'
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./infra/logging/loki-config.yaml:/etc/loki/local-config.yaml
    networks:
      - backend

  # Redis Cache
  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - backend
    command: redis-server --appendonly yes

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: lumo
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./infra/certbot/www:/var/www/certbot
      - ./infra/certbot/conf:/etc/letsencrypt
    entrypoint: >
      sh -c "certbot certonly --webroot --webroot-path=/var/www/certbot
      --email your@email.com --agree-tos --no-eff-email
      -d yourdomain.com"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - '9090:9090'
    networks:
      - backend
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - '3001:3000'
    networks:
      - backend
    depends_on:
      - prometheus

volumes:
  ai_logs:
  nginx_logs:
  prometheus_data:
  grafana_data:
  redis_data:
  postgres_data:

networks:
  backend:
    driver: bridge
